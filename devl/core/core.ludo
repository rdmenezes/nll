include "mvv"
include "io"
include "io-extn"

/**
 @brief Defines the basic operators + - * / == != <= < >= > on int and float types
 */
import int operator+( int a, int b );
import int operator-( int a, int b );
import int operator*( int a, int b );
import int operator/( int a, int b );

import float operator+( float a, int b );
import float operator-( float a, int b );
import float operator/( float a, int b );
import float operator*( float a, int b );

import float operator+( int a, float b );
import float operator-( int a, float b );
import float operator/( int a, float b );
import float operator*( int a, float b );

import float operator+( float a, float b );
import float operator-( float a, float b );
import float operator/( float a, float b );
import float operator*( float a, float b );

import int operator==( int a, int b );
import int operator==( float a, float b );
import int operator==( int a, float b );
import int operator==( float a, int b );

import int operator!=( int a, int b );
import int operator!=( float a, float b );
import int operator!=( int a, float b );
import int operator!=( float a, int b );

import int operator<=( int a, int b );
import int operator<=( float a, float b );
import int operator<=( int a, float b );
import int operator<=( float a, int b );

import int operator>=( int a, int b );
import int operator>=( float a, float b );
import int operator>=( int a, float b );
import int operator>=( float a, int b );

import int operator>( int a, int b );
import int operator>( float a, float b );
import int operator>( int a, float b );
import int operator>( float a, int b );

import int operator<( int a, int b );
import int operator<( float a, float b );
import int operator<( int a, float b );
import int operator<( float a, int b );

/**
 @brief print a string and finish by '\n'
 */
import void println( string s );

/**
 @brief print a string
 */
import void print( string s );

/**
 @brief concatene 2 strings
 */
import string operator+( string s1, string s2 );

/**
 @brief Defines the basic operators || &&
 */
import int operator||( int a, int b );
import int operator&&( int a, int b );

/**
 @brief Basic types conversion & roundings
 */
import float toFloat( int a );
import int round( float a );
import int floor( float a );
import string toString( int a );
import string toString( float a );

/**
 @brief Defines basic datatypes
 */

class Vector3i
{
	int vals[ 3 ];

	Vector3i( int x = 0, int y = 0, int z = 0 )
	{
		vals[ 0 ] = x;
		vals[ 1 ] = y;
		vals[ 2 ] = z;
	}

	int& operator[]( int index )
	{
		return vals[ index ];
	}
}

class Vector3f
{
	float vals[ 3 ];

	Vector3f( float x = 0.0, float y = 0.0, float z = 0.0 )
	{
		vals[ 0 ] = x;
		vals[ 1 ] = y;
		vals[ 2 ] = z;
	}

	float& operator[]( int index )
	{
		return vals[ index ];
	}
}

class Vector2f
{
	float vals[ 2 ];

	Vector2f( float x = 0.0, float y = 0.0 )
	{
		vals[ 0 ] = x;
		vals[ 1 ] = y;
	}

	float& operator[]( int index )
	{
		return vals[ index ];
	}
}

class Vector2i
{
	int vals[ 2 ];

	Vector2i( int x = 0, int y = 0 )
	{
		vals[ 0 ] = x;
		vals[ 1 ] = y;
	}

	int& operator[]( int index )
	{
		return vals[ index ];
	}
}

class Matrix3f
{
	float vals[ 9 ];

	Matrix3f( float a00 = 1.0, float a01 = 0.0, float a02 = 0.0,
             float a10 = 0.0, float a11 = 1.0, float a12 = 0.0,
             float a20 = 0.0, float a21 = 0.0, float a22 = 1.0 )
	{
		vals[ 0 ] = a00;
		vals[ 1 ] = a01;
		vals[ 2 ] = a02;
		vals[ 3 ] = a10;
		vals[ 4 ] = a11;
		vals[ 5 ] = a12;
		vals[ 6 ] = a20;
		vals[ 7 ] = a21;
		vals[ 8 ] = a22;
	}

   float& operator()( int y, int x )
   {
      return vals[ x + y * 3 ];
   }

   int sizex()
   {
      return 3;
   }

   int sizey()
   {
      return 3;
   }
}

class Matrix4f
{
	float vals[ 16 ];

	Matrix4f( float a00 = 1.0, float a01 = 0.0, float a02 = 0.0, float a03 = 0.0,
             float a10 = 0.0, float a11 = 1.0, float a12 = 0.0, float a13 = 0.0,
             float a20 = 0.0, float a21 = 0.0, float a22 = 1.0, float a23 = 0.0,
             float a30 = 0.0, float a31 = 0.0, float a32 = 0.0, float a33 = 1.0 )
	{
		vals[ 0 ] = a00;
		vals[ 1 ] = a01;
		vals[ 2 ] = a02;
      vals[ 3 ] = a03;
      
		vals[ 4 ] = a10;
		vals[ 5 ] = a11;
		vals[ 6 ] = a12;
      vals[ 7 ] = a13;
      
		vals[ 8 ]  = a20;
		vals[ 9 ]  = a21;
		vals[ 10 ] = a22;
      vals[ 11 ] = a23;
      
      vals[ 12 ] = a30;
		vals[ 13 ] = a31;
		vals[ 14 ] = a32;
      vals[ 15 ] = a33;
	}

   float& operator()( int y, int x )
   {
      return vals[ x + y * 4 ];
   }

   int sizex()
   {
      return 4;
   }

   int sizey()
   {
      return 4;
   }
}

void print( Vector3f v )
{
   println("  " + toString( v[ 2 ] ) );
   println("  " + toString( v[ 1 ] ) );
   println("  " + toString( v[ 0 ] ) );
   println( "Vector3f:" );
}

void print( Vector2f v )
{
   println("  " + toString( v[ 1 ] ) );
   println("  " + toString( v[ 0 ] ) );
   println( "Vector2f:" );
}

void print( Vector2i v )
{
   println("  " + toString( v[ 1 ] ) );
   println("  " + toString( v[ 0 ] ) );
   println( "Vector2i:" );
}

void print( Vector3i v )
{
   println("  " + toString( v[ 2 ] ) );
   println("  " + toString( v[ 1 ] ) );
   println("  " + toString( v[ 0 ] ) );
   println( "Vector3i:" );
}

void print( Matrix3f m )
{

   println("  " + toString( m( 2, 0 ) ) + " " + toString( m( 2, 1 ) ) + " " + toString( m( 2, 2 ) ) );
   println("  " + toString( m( 1, 0 ) ) + " " + toString( m( 1, 1 ) ) + " " + toString( m( 1, 2 ) ) );
   println("  " + toString( m( 0, 0 ) ) + " " + toString( m( 0, 1 ) ) + " " + toString( m( 0, 2 ) ) );
   println( "Matrix3f:" );
}

void print( Matrix4f m )
{
   println("  " + toString( m( 3, 0 ) ) + " " + toString( m( 3, 1 ) ) + " " + toString( m( 3, 2 ) ) + " " + toString( m( 3, 3 ) ) );
   println("  " + toString( m( 2, 0 ) ) + " " + toString( m( 2, 1 ) ) + " " + toString( m( 2, 2 ) ) + " " + toString( m( 2, 3 ) ));
   println("  " + toString( m( 1, 0 ) ) + " " + toString( m( 1, 1 ) ) + " " + toString( m( 1, 2 ) ) + " " + toString( m( 1, 3 ) ));
   println("  " + toString( m( 0, 0 ) ) + " " + toString( m( 0, 1 ) ) + " " + toString( m( 0, 2 ) ) + " " + toString( m( 0, 3 ) ));
   println( "Matrix4f:" );
}

void print( int n )
{
   print( toString( n ) );
}

void print( float n )
{
   print( toString( n ) );
}

void println( int n )
{
   println( toString( n ) );
}

void println( float n )
{
   println( toString( n ) );
}

import float cos( float angleRadian );
import float sin( float angleRadian );
import void system( string cmd );