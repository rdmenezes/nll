
/**
 @brief Defines the basic operators + - * / == != <= < >= > on int and float types
 */
import int operator+( int a, int b );
import int operator-( int a, int b );
import int operator*( int a, int b );
import int operator/( int a, int b );

import float operator+( float a, int b );
import float operator-( float a, int b );
import float operator/( float a, int b );
import float operator*( float a, int b );

import float operator+( int a, float b );
import float operator-( int a, float b );
import float operator/( int a, float b );
import float operator*( int a, float b );

import float operator+( float a, float b );
import float operator-( float a, float b );
import float operator/( float a, float b );
import float operator*( float a, float b );

import int operator==( int a, int b );
import int operator==( float a, float b );
import int operator==( int a, float b );
import int operator==( float a, int b );

import int operator!=( int a, int b );
import int operator!=( float a, float b );
import int operator!=( int a, float b );
import int operator!=( float a, int b );

import int operator<=( int a, int b );
import int operator<=( float a, float b );
import int operator<=( int a, float b );
import int operator<=( float a, int b );

import int operator>=( int a, int b );
import int operator>=( float a, float b );
import int operator>=( int a, float b );
import int operator>=( float a, int b );

import int operator>( int a, int b );
import int operator>( float a, float b );
import int operator>( int a, float b );
import int operator>( float a, int b );

import int operator<( int a, int b );
import int operator<( float a, float b );
import int operator<( int a, float b );
import int operator<( float a, int b );

/**
 @brief print a string and finish by '\n'
 */
import void println( string s );

/**
 @brief print a string
 */
import void print( string s );

/**
 @brief concatene 2 strings
 */
import string operator+( string s1, string s2 );

/**
 @brief Defines the basic operators || &&
 */
import int operator||( int a, int b );
import int operator&&( int a, int b );

/**
 @brief Basic types conversion & roundings
 */
import float toFloat( int a );
import int round( float a );
import int floor( float a );
import string toString( int a );
import string toString( float a );

/**
 @brief Defines basic datatypes
 */

class Vector3i
{
	int vals[ 3 ];

	Vector3i( int x = 0, int y = 0, int z = 0 )
	{
		vals[ 0 ] = x;
		vals[ 1 ] = y;
		vals[ 2 ] = z;
	}

	int& operator[]( int index )
	{
		return vals[ index ];
	}
}

class Vector3f
{
	float vals[ 3 ];

	Vector3f( float x = 0, float y = 0, float z = 0 )
	{
		vals[ 0 ] = x;
		vals[ 1 ] = y;
		vals[ 2 ] = z;
	}

	float& operator[]( int index )
	{
		return vals[ index ];
	}
}

class Vector2f
{
	float vals[ 2 ];

	Vector2f( float x = 0, float y = 0 )
	{
		vals[ 0 ] = x;
		vals[ 1 ] = y;
	}

	float& operator[]( int index )
	{
		return vals[ index ];
	}
}

/*
class Matrixf
{
	float vals[ 0 ];
	int sizex;
	int sizey;

	Matrixf( int sy, int sx )
	{
		// TODO init..
		sizey = sy;
		sizex = sx;
	}

	import float norm_inf();
	import Matrixf invert();
}

class Matrix3f
{
	float vals[ 9 ];

	Matrix3f( float a00 = 1, float a01 = 0, float a02 = 0,
		    float a10 = 0, float a11 = 1, float a12 = 0,
		    float a20 = 0, float a21 = 0, float a22 = 1 )
	{
		vals[ 0 ] = a00;
		vals[ 1 ] = a01;
		vals[ 2 ] = a02;
		vals[ 3 ] = a10;
		vals[ 4 ] = a11;
		vals[ 5 ] = a12;
		vals[ 6 ] = a20;
		vals[ 7 ] = a21;
		vals[ 8 ] = a22;
	}
}
*/


include "mvv"