import "core"
import "siemens"
include "helper1"


//
// configuration constants
// -----------------------------------------------------------------------------------------------------------------
//

/// saves the last XXX commands typed by the user, these will be imported next sessions
int      sizeHistoryExport            = 500;

/// defines the export/import location
string   historyExportLocation        = "c:/Temp/command_history.txt";

//
// -----------------------------------------------------------------------------------------------------------------
//

SegmentToolCentering    toolCentering;
MipToolPointer          toolPointerMip(17);
//SegmentToolPointer      pointer;
ToolAnnotations         annotations;
//SegmentToolCamera       camera;
ToolManipulators        manipultors;

VolumeContainer         volumes;



//VolumeID pet  = readVolumeMF2Asynchronous("../../nllTest/data/medical/1_-NAC.mf2");
//VolumeID ct   = readVolumeMF2Asynchronous("../../nllTest/data/medical/1_-CT.mf2");
VolumeID pet  = readVolumeMF2Asynchronous("../../nllTest/data/medical/pet.mf2");
VolumeID ct   = readVolumeMF2Asynchronous("../../nllTest/data/medical/ct.mf2");
//VolumeID nema = readVolumeMF2Asynchronous("c:/tmp3/nema.mf2");

Lut petLut( 5000.0, 20000.0, Vector3i( 0, 255, 0 ) );
Lut ctLut( -250.0, 250.0 );


//petLut.set( 0.0, 60000.0 );
FindPeakVoxel peak( pet, 15, manipultors );
DisplayRegionDetection detection( annotations );
AnnotationCreator annotationCreator( annotations, manipultors );
VolumeSwitch switch( ctLut, volumes, volumeList, detection );

class KeyboardCallback
{
   typedef void() KeyCallback;

   KeyCallback[]  callbacks;                 // hold a call back
   string[]       callbacksKey;              // hold the key for the corresponding callback
   int[]          callbacksKeyModifier;      // corresponding modifier for the key: (0 => normal), (1 => CTRL), (2 => SHIFT), (3 => ALT)
   int            nbCallBacks = 0;           // the number of callbacks stored

   void addShortcut( KeyCallback callback, string key, int modifier = 0 )
   {
      print("nbCallbacks=" + toString(nbCallBacks));
      KeyCallback c  [ nbCallBacks + 1 ];
      string      ck [ nbCallBacks + 1 ];
      int         ckm[ nbCallBacks + 1 ];

      // copy over the data in a new array
      int n = 0;
      while ( n < nbCallBacks )
      {
         c  [ n ] = callbacks[ n ];
         ck [ n ] = callbacksKey[ n ];
         ckm[ n ] = callbacksKeyModifier[ n ];
         n = n + 1;
      }

      // add the new shortcut
      c  [ nbCallBacks ] = callback;
      ck [ nbCallBacks ] = key;
      ckm[ nbCallBacks ] = modifier;

      KeyboardCallback o;
      o.callbacks = c;
      o.callbacksKey = ck;
      o.callbacksKeyModifier = ckm;
      o.nbCallBacks = nbCallBacks + 1;

      // replace the object
      this = o;
   }

   KeyboardCallback()
   {}
}

KeyboardCallback callbacks;
callbacks.addShortcut( switch.next, "F3" );
callbacks.addShortcut( peak.run, "F2" );
callbacks.addShortcut( annotationCreator.run, "F1" );


AffineRegistration petReg;
AffineRegistration ctReg;


volumes.add( ct, ctLut, 0.5, ctReg );
volumes.add( pet, petLut, 0.5, petReg );
//volumes.add( nema, petLut, 0.5, petReg );

ToolAnnotations::AnnotationID a1 = annotations.add(Vector3f(52.0, -159.0, 1327.0), "Left Ventricle", Vector3i(0, 255, 255));

Mip mip1( pet, petLut );
mip1.setTool( toolPointerMip );
mip1.setTool( annotations );

ManipulatorCuboid cuboid( Vector3f(10.0, -160.0, 1230.0), Vector3f(210.0, -260.0, 1430.0) );
ManipulatorPointer pointer;
ManipulatorPoint mp( Vector3f(0.0, -160.0, 1230.0) );
manipultors.add( mp );
manipultors.add( ManipulatorPoint( Vector3f(10.0, -160.0, 1230.0) ) );
manipultors.add( ManipulatorPoint( Vector3f(20.0, -160.0, 1230.0) ) );
manipultors.add( pointer );
manipultors.add( cuboid );

Segment segment1( volumes, Vector3f( 1.0, 0.0, 0.0 ), Vector3f( 0.0, -1.0, 0.0 ) );
segment1.setTool( toolCentering );
segment1.setTool( manipultors );
segment1.setTool( annotations );

Segment segment2( volumes, Vector3f( 0.0, 1.0, 0.0 ), Vector3f( 0.0, 0.0, 1.0 ) );
segment2.setTool( toolCentering );
segment2.setTool( manipultors );
segment2.setTool( annotations );

Segment segment3( volumes, Vector3f( 1.0, 0.0, 0.0 ), Vector3f( 0.0, 0.0, 1.0 ) );
segment3.setTool( toolCentering );
segment3.setTool( manipultors );
segment3.setTool( annotations );

Layout::Vertical vertical;
Layout::Horizontal horizontal;
Layout l1( segment1 );
Layout l2( segment2 );
Layout l3( segment3 );
Layout l6( Console() );
Layout l4( mip1 );

Layout layoutDisplay( vertical, Layout(horizontal, l1, l2, 0.50), Layout(horizontal, l3, l4, 0.50), 0.50 );
Layout layout = Layout(vertical, l6, layoutDisplay, 0.10);


//Image m = segment1.getRawImage();
//writeBmp( m, "c:/tx.bmp" );
ImageHolder holder;

Layout layout2 = Layout(vertical, Layout(Console()), Layout(holder), 0.5);
Layout layout1 = layout;

void mouseSegmentCallbackNull(Vector2i mousePosition, Vector3f segmentOrigin, Vector2f segmentSpacing, Vector2i segmentSize)
{
}

class CuboidCreator
{
   Vector3f p1;
   Vector3f p2;
   ManipulatorCuboid cuboid = NULL;
   ToolManipulators  manipulators = NULL;

   CuboidCreator( ToolManipulators  m )
   {
      p1 = Vector3f();
      p2 = Vector3f();
      manipulators = m;
   }

   void start()
   {
      setOnSegmentLeftMousePressed( this.cuboidCreate );
   }

   void cuboidCreate(Vector2i mousePosition, Vector3f segmentOrigin, Vector2f segmentSpacing, Vector2i segmentSize)
   {
      cuboid = ManipulatorCuboid( p1, p2 );
      manipulators.add( cuboid );

      setMousePointer( 5 );
      setOnSegmentLeftMousePressed( this.cuboidUpdate );
      setOnSegmentLeftMouseRelease( this.cuboidEnd );
   }

   void cuboidUpdate(Vector2i mousePosition, Vector3f segmentOrigin, Vector2f segmentSpacing, Vector2i segmentSize)
   {

   }

   void cuboidEnd(Vector2i mousePosition, Vector3f segmentOrigin, Vector2f segmentSpacing, Vector2i segmentSize)
   {
      // restore the settings
      setMousePointer( 1 );
      setOnSegmentLeftMousePressed( NULL );
      setOnSegmentLeftMouseRelease( NULL );
   }
}

CuboidCreator creator( manipultors );
creator.start();

/*
import "core"
import "siemens"

include "helper1"


//
// configuration constants
// -----------------------------------------------------------------------------------------------------------------
//

/// saves the last XXX commands typed by the user, these will be imported next sessions
int      sizeHistoryExport            = 500;

/// defines the export/import location
string   historyExportLocation        = "c:/Temp/command_history.txt";

//
// -----------------------------------------------------------------------------------------------------------------
//

SegmentToolCentering    toolCentering;
MipToolPointer          toolPointerMip(17);
ToolAnnotations         annotations;
ToolManipulators        manipultors;

VolumeContainer         volumes;
VolumeContainer         volumes2;


VolumeID pet  = readVolumeMF2Asynchronous("../../nllTest/data/medical/pet1a.mf2");
VolumeID ct   = readVolumeMF2Asynchronous("../../nllTest/data/medical/ct1a.mf2");

VolumeID pet2  = readVolumeMF2Asynchronous("../../nllTest/data/medical/pet1b.mf2");
VolumeID ct2   = readVolumeMF2Asynchronous("../../nllTest/data/medical/ct1b.mf2");

//VolumeID nema = readVolumeMF2Asynchronous("c:/tmp3/nema.mf2");

Lut petLut( 5000.0, 20000.0, Vector3i( 0, 255, 0 ) );
Lut ctLut( -250.0, 250.0 );


//petLut.set( 0.0, 60000.0 );
FindPeakVoxel peak( pet, 15, manipultors );
//DisplayRegionDetection detection( annotations );
AnnotationCreator annotationCreator( annotations, manipultors );
//VolumeSwitch switch( ctLut, volumes, volumeList, detection );

// @brief Structure defining key callbacks @note only special characters F1-F10, ESC, as well as all ASCII character/+modifier can have a callback associated @note if "callbacks" is modified, the variable must be reaffected, and not only the arrays...
class KeyboardCallback
{
   typedef void() KeyCallback;

   KeyCallback[]  callbacks;                 // hold a call back
   string[]       callbacksKey;              // hold the key for the corresponding callback
   int[]          callbacksKeyModifier;      // corresponding modifier for the key: (0 => normal), (1 => CTRL), (2 => SHIFT), (3 => ALT)
   int            nbCallBacks = 0;           // the number of callbacks stored

   void addShortcut( KeyCallback callback, string key, int modifier = 0 )
   {
      print("nbCallbacks=" + toString(nbCallBacks));
      KeyCallback c  [ nbCallBacks + 1 ];
      string      ck [ nbCallBacks + 1 ];
      int         ckm[ nbCallBacks + 1 ];

      // copy over the data in a new array
      int n = 0;
      while ( n < nbCallBacks )
      {
         c  [ n ] = callbacks[ n ];
         ck [ n ] = callbacksKey[ n ];
         ckm[ n ] = callbacksKeyModifier[ n ];
         n = n + 1;
      }

      // add the new shortcut
      c  [ nbCallBacks ] = callback;
      ck [ nbCallBacks ] = key;
      ckm[ nbCallBacks ] = modifier;

      KeyboardCallback o;
      o.callbacks = c;
      o.callbacksKey = ck;
      o.callbacksKeyModifier = ckm;
      o.nbCallBacks = nbCallBacks + 1;

      // replace the object
      this = o;
   }

   KeyboardCallback()
   {}
}

KeyboardCallback callbacks;
//callbacks.addShortcut( switch.next, "F3" );
callbacks.addShortcut( peak.run, "F2" );
callbacks.addShortcut( annotationCreator.run, "F1" );


AffineRegistration petReg;
AffineRegistration ctReg;


volumes.add( ct, ctLut, 0.5, ctReg );
volumes.add( pet, petLut, 0.5, petReg );

volumes2.add( ct2, ctLut, 0.5, ctReg );
volumes2.add( pet2, petLut, 0.5, petReg );

//ToolAnnotations::AnnotationID a1 = annotations.add(Vector3f(52.0, -159.0, 1327.0), "Left Ventricle", Vector3i(0, 255, 255));

ManipulatorPointer manipulator2;
manipultors.add( manipulator2 );

Segment segment1( volumes, Vector3f( 1.0, 0.0, 0.0 ), Vector3f( 0.0, -1.0, 0.0 ) );
segment1.setTool( toolCentering );
segment1.setTool( manipultors );
segment1.setTool( annotations );

Segment segment2( volumes, Vector3f( 0.0, 1.0, 0.0 ), Vector3f( 0.0, 0.0, 1.0 ) );
segment2.setTool( toolCentering );
segment2.setTool( manipultors );
segment2.setTool( annotations );

Segment segment3( volumes, Vector3f( 1.0, 0.0, 0.0 ), Vector3f( 0.0, 0.0, 1.0 ) );
segment3.setTool( toolCentering );
segment3.setTool( manipultors );
segment3.setTool( annotations );

Segment segment4( volumes2, Vector3f( 1.0, 0.0, 0.0 ), Vector3f( 0.0, -1.0, 0.0 ) );
segment4.setTool( toolCentering );
segment4.setTool( manipultors );
segment4.setTool( annotations );

Segment segment5( volumes2, Vector3f( 0.0, 1.0, 0.0 ), Vector3f( 0.0, 0.0, 1.0 ) );
segment5.setTool( toolCentering );
segment5.setTool( manipultors );
segment5.setTool( annotations );

Segment segment6( volumes2, Vector3f( 1.0, 0.0, 0.0 ), Vector3f( 0.0, 0.0, 1.0 ) );
segment6.setTool( toolCentering );
segment6.setTool( manipultors );
segment6.setTool( annotations );


Layout::Vertical vertical;
Layout::Horizontal horizontal;
Layout l1( segment1 );
Layout l2( segment2 );
Layout l3( segment3 );
Layout l6( Console() );

Layout top    = Layout( horizontal, Layout( segment1 ), Layout( horizontal, Layout( segment2 ), Layout( segment3 ), 0.5 ), 0.33 );
Layout bottom = Layout( horizontal, Layout( segment4 ), Layout( horizontal, Layout( segment5 ), Layout( segment6 ), 0.5 ), 0.33 );
Layout layoutDisplay( vertical, top, bottom, 0.50 );

Layout layout = Layout(vertical, l6, layoutDisplay, 0.10);
*/