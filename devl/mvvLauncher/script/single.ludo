import "core"
import "siemens"

include "helper1"


/**
 @note the following variables must have been defined:
       - "layout" of type "Layout" defines the layout and event dispatcher to be used.
       - "callbacks" of type "KeyboardCallback" defines the scripts to be called upon the specific key pressed.

 @note the following variables may be defined (if not default values apply)
       - "sizeHistoryExport" of type "int", defines the number of commands imported/exported between sessions
       - "historyExportLocation" of type "string", defines where the command history is imported/exported
 */

//
// configuration constants
// -----------------------------------------------------------------------------------------------------------------
//

/// saves the last XXX commands typed by the user, these will be imported next sessions
int      sizeHistoryExport            = 500;

/// defines the export/import location
string   historyExportLocation        = "c:/Temp/command_history.txt";

//
// -----------------------------------------------------------------------------------------------------------------
//

SegmentToolCentering    toolCentering;
MipToolPointer          toolPointerMip(17);
SegmentToolPointer      pointer;
ToolAnnotations         annotations;
SegmentToolCamera       camera;

VolumeContainer         volumes;

VolumeID pet = readVolumeMF2Asynchronous("../../nllTest/data/medical/pet.mf2");
VolumeID ct = readVolumeMF2Asynchronous("../../nllTest/data/medical/ct.mf2");

Lut petLut( 5000.0, 20000.0, Vector3i( 0, 255, 0 ) );
Lut ctLut( -250.0, 250.0 );

DisplayRegionDetection detection( annotations );
AnnotationCreator annotationCreator( annotations, pointer );
VolumeSwitch switch( ctLut, volumes, volumeList, detection );

/** @brief Structure defining key callbacks @note only special characters F1-F10, ESC, as well as all ASCII character/+modifier can have a callback associated @note if "callbacks" is modified, the variable must be reaffected, and not only the arrays... */
class KeyboardCallback
{
   typedef void() KeyCallback;

   KeyCallback[]  callbacks;                 // hold a call back
   string[]       callbacksKey;              // hold the key for the corresponding callback
   int[]          callbacksKeyModifier;      // corresponding modifier for the key: (0 => normal), (1 => CTRL), (2 => SHIFT), (3 => ALT)

   KeyboardCallback( AnnotationCreator creator, VolumeSwitch switch )
   {
      KeyCallback c[]   = { creator.run, switch.next };
      string      ck[]  = { "F1",   "F3" };
      int         ckm[] = { 0,      0 };

      callbacks            = c;
      callbacksKey         = ck;
      callbacksKeyModifier = ckm;
   }
}

KeyboardCallback callbacks( annotationCreator, switch );


AffineRegistration petReg;
AffineRegistration ctReg;

volumes.add( ct, ctLut, 0.5, ctReg );
volumes.add( pet, petLut, 0.5, petReg );

ToolAnnotations::AnnotationID a1 = annotations.add(Vector3f(52.0, -159.0, 1327.0), "Left Ventricle", Vector3i(0, 255, 255));

Mip mip1( pet, petLut );
mip1.setTool( toolPointerMip );
mip1.setTool( annotations );

Segment segment1( volumes, Vector3f( 1.0, 0.0, 0.0 ), Vector3f( 0.0, 1.0, 0.0 ) );
segment1.setTool( pointer );
segment1.setTool( annotations );
segment1.setTool( camera );
segment1.setTool( toolCentering );

Segment segment2( volumes, Vector3f( 0.0, 1.0, 0.0 ), Vector3f( 0.0, 0.0, 1.0 ) );
segment2.setTool( pointer );
segment2.setTool( annotations );
segment2.setTool( camera );
segment2.setTool( toolCentering );

Segment segment3( volumes, Vector3f( 1.0, 0.0, 0.0 ), Vector3f( 0.0, 0.0, 1.0 ) );
segment3.setTool( pointer );
segment3.setTool( annotations );
segment3.setTool( camera );
segment3.setTool( toolCentering );

Layout::Vertical vertical;
Layout::Horizontal horizontal;
Layout l1( segment1 );
Layout l2( segment2 );
Layout l3( segment3 );
Layout l6( Console() );
Layout l4( mip1 );

Layout layoutDisplay( vertical, Layout(horizontal, l1, l2, 0.51), Layout(horizontal, l3, l4, 0.51), 0.51 );
Layout layout = Layout(vertical, l6, layoutDisplay, 0.15);

Volume v = pet.getVolume();
//VolumeID pet2 = readVolumeMF2("../../nllTest/data/medical/test1.mf2");
VolumeID pet2 = resampleNearest( pet, petReg, Vector3i( 128, 128, 132 ), v.getPst() );
print(pet2);