import "core"
include "helper1"

import "siemens"
import "mvvDicomTools"
import "mvvForms"

/**
 @note the following variables must have been defined:
       - "layout" of type "Layout" defines the layout and event dispatcher to be used.
       - "callbacks" of type "KeyboardCallback" defines the scripts to be called upon the specific key pressed.

 @note the following variables may be defined (if not default values apply)
       - "sizeHistoryExport" of type "int", defines the number of commands imported/exported between sessions
       - "historyExportLocation" of type "string", defines where the command history is imported/exported
 */

//
// configuration constants
// -----------------------------------------------------------------------------------------------------------------
//

/// saves the last XXX commands typed by the user, these will be imported next sessions
int      sizeHistoryExport            = 500;

/// defines the export/import location
string   historyExportLocation        = "c:/Temp/command_history.txt";

//
// -----------------------------------------------------------------------------------------------------------------
//

/**
 @brief Fully handle the display of a DICOM directory. It will create timepoint for each
        Study UID, and populate them with all the belonging Series UID
 @TODO: introduce a selection mecanism to display the selected modules
 */
class DicomPresentation
{
   VolumeID[]        volumes = NULL;
   DicomAttributs[]  attributs;
   string            dicomPath;
   int[]             studyIndex;
   int               nbTimepoints;
   int               nbVolumes;
   Layout            layoutMain = NULL;
   VolumeContainer[] volumesContainer;

   ToolAnnotations         annotations;
   ToolManipulators        manipultors;
   SegmentToolCentering    toolCentering;
   ManipulatorPointer      pointer;

   DicomPresentation( string path = "" )
   {
      dicomPath = path;
   }

   void run()
   {
      if ( dicomPath == "" )
      {
         dicomPath = boxOpenFolder( "Choose a DICOM directory" );
      }
      volumes = readDicomVolumes( dicomPath, attributs, studyIndex );

      nbTimepoints = size( studyIndex ) + 1;
      nbVolumes = size( volumes );
      VolumeContainer vc[ nbTimepoints ];
      volumesContainer = vc;

      if ( nbTimepoints > 0 )
      {
         layoutMain = createTimepoints( 0 );
      }

      manipultors.add( pointer );
   }

   Layout createTimepoints( int timepoint )
   {
      Layout::Horizontal h;
      Layout layout = createTimepoint( timepoint );

      float ratio = 1.0 / ( nbTimepoints - timepoint );
      if ( timepoint + 1 != nbTimepoints )
      {
         Layout layoutTp = createTimepoints( timepoint + 1 );
         layout = Layout(h, layout, layoutTp, ratio);
      }
      return layout;
   }

   Layout createTimepoint( int timepoint )
   {
      println( "---create timepoint=" + toString( timepoint ) );
      // create the segments
      Segment segment1( volumesContainer[ timepoint ], Vector3f( 1.0, 0.0, 0.0 ), Vector3f( 0.0, -1.0, 0.0 ) );
      segment1.setTool( toolCentering );
      segment1.setTool( manipultors );
      segment1.setTool( annotations );

      Segment segment2( volumesContainer[ timepoint ], Vector3f( 0.0, 1.0, 0.0 ), Vector3f( 0.0, 0.0, 1.0 ) );
      segment2.setTool( toolCentering );
      segment2.setTool( manipultors );
      segment2.setTool( annotations );

      Segment segment3( volumesContainer[ timepoint ], Vector3f( 1.0, 0.0, 0.0 ), Vector3f( 0.0, 0.0, 1.0 ) );
      segment3.setTool( toolCentering );
      segment3.setTool( manipultors );
      segment3.setTool( annotations );

      Layout::Vertical vertical;
      Layout::Horizontal horizontal;
      Layout l1( segment1 );
      Layout l2( segment2 );
      Layout l3( segment3 );
      Layout layoutDisplay( vertical, Layout(horizontal, l1, l2, 0.51), l3, 0.51 );

      Lut petLut( 1000.0, 12000.0, Vector3i( 0, 255, 0 ) );
      Lut ctLut( -250.0, 250.0 );
      Lut mrLut( -250.0, 10250.0,  Vector3i( 0, 255, 0 ) );
      int lastTimepoint = nbTimepoints - 1;

      
      // populate the segments
      int start;
      int end;

      if ( timepoint == 0 )
      {
         if ( nbTimepoints == 1 )
         {
            start = 0;
            end = nbVolumes - 1;
         } else {
            start = 0;
            end = studyIndex[ 0 ];
         }
      } else {
         
         if ( timepoint == lastTimepoint )
         {
            start = studyIndex[ timepoint - 1 ] + 1;
            end = nbVolumes - 1;
         } else {
            start = studyIndex[ timepoint - 1 ] + 1;
            end = studyIndex[ timepoint ];
         }
      }

      int n = 0;
      int size = end - start + 1;
      if ( size > 0 )
      {
         // create the selection list
         string str[ size ];
         while ( n < size )
         {
            int id = start + n;
            Volume v = getVolume( volumes[ id ] );
            if ( v != NULL )  // in case the volume couldn't be generated (e.g., wrong DICOM manipulated data...)
            {
               str[ n ] = attributs[ id ].modality + "-" + attributs[ id ].seriesDescription + "-" + attributs[ id ].patientName;
            } else {
               str[ n ] = "Invalid data";
            }
            n = n + 1;
         }

         int[] selection = boxTextSelection( "Timepoint=" + toString( timepoint ) + ", Choose DICOM series to display", str );

         // finally populate the timepoint
         n = 0;
         end = size( selection );
         while ( n < end )
         {
            int id = start + selection[ n ];
            Volume v = getVolume( volumes[ id ] );
            if ( v != NULL )
            {
               if ( v.getSize()[ 2 ] > 1 ) // just discard one slice volumes...
               {
                  if ( attributs[ id ].modality == "CT" )
                  {
                     volumesContainer[ timepoint ].add( volumes[ id ], ctLut );
                  }

                  if ( attributs[ id ].modality == "PT" )
                  {
                     volumesContainer[ timepoint ].add( volumes[ id ], petLut );
                  }

                  if ( attributs[ id ].modality == "MR" )
                  {
                     volumesContainer[ timepoint ].add( volumes[ id ], mrLut );
                  }
               }
            }
            n = n + 1;
         }
      }
      
      return layoutDisplay;
   }
}

//DicomPresentation presentation( "N:\\MBoxData\\ImagePool\\Clinical\\PET_CT_WB_MULTI_PHASE\\CHILD_MULTIPLE_CT_SCANS\\PET_PETCT_BABY_BIPHASISCH_NEU_(CHILD)" );
//DicomPresentation presentation( "C:/HIREZ_#9_UTMC/2_Timepoints/HIREZ_#9_UTMC" );
//DicomPresentation presentation( "C:/HIREZ_#9_UTMC/2_Timepoints/HIREZ_#9_UTMC" );
DicomPresentation presentation;
presentation.run();


Layout::Vertical vertical;
Layout::Horizontal horizontal;
Layout l6( Console() );

Layout layout = Layout(vertical, l6, presentation.layoutMain, 0.05);


KeyboardCallback callbacks;