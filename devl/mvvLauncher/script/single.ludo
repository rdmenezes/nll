import "core"
import "siemens"
include "helper1"

/**
 @note the following variables must have been defined:
       - "layout" of type "Layout" defines the layout and event dispatcher to be used.
       - "callbacks" of type "KeyboardCallback" defines the scripts to be called upon the specific key pressed.

 @note the following variables may be defined (if not default values apply)
       - "sizeHistoryExport" of type "int", defines the number of commands imported/exported between sessions
       - "historyExportLocation" of type "string", defines where the command history is imported/exported
 */

//
// configuration constants
// -----------------------------------------------------------------------------------------------------------------
//

/// saves the last XXX commands typed by the user, these will be imported next sessions
int      sizeHistoryExport            = 500;

/// defines the export/import location
string   historyExportLocation        = "c:/Temp/command_history.txt";

//
// -----------------------------------------------------------------------------------------------------------------
//

SegmentToolCentering    toolCentering;
MipToolPointer          toolPointerMip(17);
ToolManipulators        manipultors;
ManipulatorPointer      pointer;

VolumeContainer         volumes;

VolumeID pet  = readVolumeMF2Asynchronous("../../nllTest/data/medical/pet.mf2");
VolumeID ct   = readVolumeMF2Asynchronous("../../nllTest/data/medical/ct.mf2");

Lut petLut( 5000.0, 20000.0, Vector3i( 0, 255, 0 ) );
Lut petLutWhite( 4000.0, 20000.0, Vector3i( 255, 255, 255 ) );
petLutWhite.setColor(0, 100, 100, 100);
Lut ctLut( -250.0, 250.0 );

KeyboardCallback callbacks;

AffineRegistration petReg;
AffineRegistration ctReg;

volumes.add( ct, ctLut, 0.5, ctReg );
volumes.add( pet, petLut, 0.5, petReg );

Mip mip1( pet, petLutWhite );
mip1.setTool( toolPointerMip );

manipultors.add( pointer );

Segment segment1( volumes, Vector3f( 1.0, 0.0, 0.0 ), Vector3f( 0.0, -1.0, 0.0 ) );
segment1.setTool( toolCentering );
segment1.setTool( manipultors );

Segment segment2( volumes, Vector3f( 0.0, 1.0, 0.0 ), Vector3f( 0.0, 0.0, 1.0 ) );
segment2.setTool( toolCentering );
segment2.setTool( manipultors );

Segment segment3( volumes, Vector3f( 1.0, 0.0, 0.0 ), Vector3f( 0.0, 0.0, 1.0 ) );
segment3.setTool( toolCentering );
segment3.setTool( manipultors );


Layout::Vertical vertical;
Layout::Horizontal horizontal;
Layout l1( segment1 );
Layout l2( segment2 );
Layout l3( segment3 );
Layout l4( mip1 );

Layout layout( vertical, Layout(horizontal, l1, l2, 0.51), Layout(horizontal, l3, l4, 0.51), 0.51 );

class PostProcessing
{
   ManipulatorPointer pointer;
   
   PostProcessing( ManipulatorPointer p )
   {
      pointer = p;
   }
   
   void run( Image image, Vector2f spacing, Vector3f origin, Vector3f axisx, Vector3f axisy )
   {
      Plane plane( origin, axisx * spacing[ 0 ],  axisy * spacing[ 1 ] );
      //Plane plane( origin, axisx ,  axisy  );
      Vector3f projPlane = plane.orthogonalProjection( pointer.getPosition() );
      Vector2f posPointer = plane.worldToPlaneCoordinate( projPlane );
      if ( posPointer[ 0 ] < toFloat( image.sizex() ) &&
           posPointer[ 1 ] < toFloat( image.sizey() ) &&
           posPointer[ 0 ] >= 0.0 &&
           posPointer[ 1 ] >= 0.0 )
      {
         // the pointer is displayed on the screen
         drawLine( image, Vector2i( 0, 0 ), Vector2i( floor( posPointer[ 0 ] ), floor( posPointer[ 1 ] ) ) );
      }
/*
      string o = toString( origin[ 0 ] ) + " " + toString( origin[ 1 ] ) + " " + toString( origin[ 2 ] );
      string proj = toString( projPlane[ 0 ] ) + " " + toString( projPlane[ 1 ] ) + " " + toString( projPlane[ 2 ] );
      string ax = toString( axisx[ 0 ] ) + " " + toString( axisx[ 1 ] ) + " " + toString( axisx[ 2 ] );
      string ay = toString( axisy[ 0 ] ) + " " + toString( axisy[ 1 ] ) + " " + toString( axisy[ 2 ] );
      string pos = toString( posPointer[ 0 ] ) + " " + toString( posPointer[ 1 ] );

      drawText( image,
                "Pointer proj=" + proj,
                Vector2i( 0, image.sizey() - 26 ),
                25,
                Vector3i( 255, 0, 0 ) );

      drawText( image,
                "origin=" + o,
                Vector2i( 0, image.sizey() - 26 * 2 ),
                25,
                Vector3i( 255, 0, 0 ) );

      drawText( image,
                "pos=" + pos,
                Vector2i( 0, image.sizey() - 26 * 3 ),
                25,
                Vector3i( 255, 0, 0 ) );

      drawText( image,
                "axisx=" + ax,
                Vector2i( 0, image.sizey() - 26 * 4 ),
                25,
                Vector3i( 255, 0, 0 ) );

      drawText( image,
                "axisy=" + ay,
                Vector2i( 0, image.sizey() - 26 * 5 ),
                25,
                Vector3i( 255, 0, 0 ) );*/
   }
}

PostProcessing postProcessing( pointer );
segment1.setTool( ToolPostprocessing( postProcessing.run ) );
segment2.setTool( ToolPostprocessing( postProcessing.run ) );
segment3.setTool( ToolPostprocessing( postProcessing.run ) );

/*
import "core"
import "siemens"
include "helper1"


//
// configuration constants
// -----------------------------------------------------------------------------------------------------------------
//

/// saves the last XXX commands typed by the user, these will be imported next sessions
int      sizeHistoryExport            = 500;

/// defines the export/import location
string   historyExportLocation        = "c:/Temp/command_history.txt";

//
// -----------------------------------------------------------------------------------------------------------------
//

SegmentToolCentering    toolCentering;
MipToolPointer          toolPointerMip(17);
//SegmentToolPointer      pointer;
ToolAnnotations         annotations;
//SegmentToolCamera       camera;
ToolManipulators        manipultors;
ManipulatorPointer      pointer;

VolumeContainer         volumes;



//VolumeID pet  = readVolumeMF2Asynchronous("../../nllTest/data/medical/1_-NAC.mf2");
//VolumeID ct   = readVolumeMF2Asynchronous("../../nllTest/data/medical/1_-CT.mf2");
VolumeID pet  = readVolumeMF2Asynchronous("../../nllTest/data/medical/pet.mf2");
VolumeID ct   = readVolumeMF2Asynchronous("../../nllTest/data/medical/ct.mf2");
//VolumeID nema = readVolumeMF2Asynchronous("c:/tmp3/nema.mf2");

Lut petLut( 3000.0, 20000.0, Vector3i( 0, 255, 0 ) );
Lut ctLut( -250.0, 250.0 );
Lut ctLutMip( -1000.0, 1000.0 );


//petLut.set( 0.0, 60000.0 );
FindPeakVoxel peak( pet, 15, pointer );
DisplayRegionDetection detection( annotations );
AnnotationCreator annotationCreator( annotations, pointer );
VolumeSwitch switch( ctLut, volumes, volumeList, detection );

KeyboardCallback callbacks;
callbacks.addShortcut( switch.next, "F3" );
callbacks.addShortcut( peak.run, "F2" );
callbacks.addShortcut( annotationCreator.run, "F1" );


AffineRegistration petReg;
AffineRegistration ctReg;


volumes.add( ct, ctLut, 0.5, ctReg );
volumes.add( pet, petLut, 0.5, petReg );
//volumes.add( nema, petLut, 0.5, petReg );

ToolAnnotations::AnnotationID a1 = annotations.add(Vector3f(52.0, -159.0, 1327.0), "Left Ventricle", Vector3i(0, 255, 255));

//Mip mip1( ct, ctLutMip );
Mip mip1( pet, petLut );
mip1.setTool( toolPointerMip );
mip1.setTool( annotations );

ManipulatorCuboid cuboid( Vector3f(10.0, -160.0, 1230.0), Vector3f(210.0, -260.0, 1430.0) );
ManipulatorPoint mp( Vector3f(0.0, -160.0, 1230.0) );
manipultors.add( mp );
manipultors.add( ManipulatorPoint( Vector3f(10.0, -160.0, 1230.0) ) );
manipultors.add( ManipulatorPoint( Vector3f(20.0, -160.0, 1230.0) ) );
manipultors.add( pointer );
manipultors.add( cuboid );

Segment segment1( volumes, Vector3f( 1.0, 0.0, 0.0 ), Vector3f( 0.0, -1.0, 0.0 ) );
segment1.setTool( toolCentering );
segment1.setTool( manipultors );
segment1.setTool( annotations );

Segment segment2( volumes, Vector3f( 0.0, 1.0, 0.0 ), Vector3f( 0.0, 0.0, 1.0 ) );
segment2.setTool( toolCentering );
segment2.setTool( manipultors );
segment2.setTool( annotations );

Segment segment3( volumes, Vector3f( 1.0, 0.0, 0.0 ), Vector3f( 0.0, 0.0, 1.0 ) );
segment3.setTool( toolCentering );
segment3.setTool( manipultors );
segment3.setTool( annotations );

Layout::Vertical vertical;
Layout::Horizontal horizontal;
Layout l1( segment1 );
Layout l2( segment2 );
Layout l3( segment3 );
Layout l6( Console() );
Layout l4( mip1 );

Layout layoutDisplay( vertical, Layout(horizontal, l1, l2, 0.50), Layout(horizontal, l3, l4, 0.50), 0.50 );
Layout layout = Layout(vertical, l6, layoutDisplay, 0.10);


//Image m = segment1.getRawImage();
//writeBmp( m, "c:/tx.bmp" );
ImageHolder holder;

Layout layout2 = Layout(vertical, Layout(Console()), Layout(holder), 0.5);
Layout layout1 = layout;



CuboidCreator creator( manipultors );
creator.start();
*/