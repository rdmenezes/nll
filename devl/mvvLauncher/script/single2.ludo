import "core"
import "siemens"
import "mvvDicomTools"

include "helper1"
//include "N:/Shared Folder/Ludovic/mvv-1.0/mvv-1.0.4/Registration/mrRegistrationData"
/*
string base = "C:/Users/Civo/Desktop/nll/RegistrationImpl/data/mr/";
//string base = "C:/Users/Civo/Desktop/nll/RegistrationImpl/data/mrOldConversion/";

string registrationVolumes[] =
{
	base + "MR2-281/",
	base + "MR2-282/",
	base + "MR2-283/",
	base + "MR2-284/",
	base + "MR2-285/",
	base + "MR2-286/",
	base + "MR2-287/",
	base + "MR2-288/",
	base + "MR2-289/",
	base + "MR2-295/",
	base + "MR2-298/",
	base + "MR2-300/",
	base + "MR4-290/",
	base + "MR4-291/",
	base + "MR4-292/",
	base + "MR4-293/",
	base + "MR4-294/",
	base + "MR4-296/",
	base + "MR4-297/",
	base + "MR12-299/"
};*/


/**
 @note the following variables must have been defined:
       - "layout" of type "Layout" defines the layout and event dispatcher to be used.
       - "callbacks" of type "KeyboardCallback" defines the scripts to be called upon the specific key pressed.

 @note the following variables may be defined (if not default values apply)
       - "sizeHistoryExport" of type "int", defines the number of commands imported/exported between sessions
       - "historyExportLocation" of type "string", defines where the command history is imported/exported
 */

//
// configuration constants
// -----------------------------------------------------------------------------------------------------------------
//

/// saves the last XXX commands typed by the user, these will be imported next sessions
int      sizeHistoryExport            = 500;

/// defines the export/import location
string   historyExportLocation        = "c:/Temp/command_history.txt";

//
// -----------------------------------------------------------------------------------------------------------------

SegmentToolCentering    toolCentering;
MipToolPointer          toolPointerMip(17);
ToolAnnotations         annotations;
ToolManipulators        manipultors;
ManipulatorPointer      pointer;

VolumeContainer         volumes;


class VolumeSwitchReg
{
   int index                        = 0;
   Lut lut1                         = NULL;
   Lut lut2                         = NULL;
   VolumeID displayed1              = NULL;
   VolumeID displayed2              = NULL;
   DisplayRegionDetection detection = NULL;
   VolumeContainer volumes          = NULL;
   RegistrationMr registrator		   = NULL;
   int groundtruth	= 0; 

   AffineRegistration tfmGroundTruth;
   AffineRegistration tfmReg;

   VolumeSwitchReg( Lut l1, Lut l2, VolumeContainer vs, RegistrationMr reg )
   {
      lut1 = l1;
      lut2 = l2;
      volumes = vs;
	   registrator = reg;

      //displayed1 = readDicomVolume( list[ 6 ] );
   }

   void next()
   {
      index = index + 1;
	  register();
   }

   void switchGroundTruth()
   {
      volumes.clear();
      groundtruth = 1 - groundtruth;
	  if ( groundtruth == 1 )
	  {
	     print( "GROUND TRUTH" );
		 volumes.add( displayed2, lut1, 1.0, tfmGroundTruth );
	  } else {
	     print( "ALGO RESULT" );
	     volumes.add( displayed2, lut1, 1.0, tfmReg );
	  }
      volumes.add( displayed1, lut2, 1.0 );
   }

   void register()
   {
	  volumes.clear();
	  groundtruth = 0;

	  string name = registrator.getTestMrVolume( index );
	  //name = "MR-345";

      string base = "D:/devel/sandbox_vs2010/RegistrationImpl/data/mr/";
      string volname = base + name;


      print( "----------------=" + volname );
      displayed2 = readDicomVolume( volname );

      lut1.detectRange( displayed2, 0.5 );
      
	  int id = 0;
	  AffineRegistration tfm;
      tfmReg = registrator.affinePlanarRegistrationMr( displayed2, id );
	  tfmGroundTruth = AffineRegistration( registrator.getGoundTruth( "template_MR", name ) );
	  displayed1 = registrator.templates[id];

      volumes.add( displayed2, lut1, 1.0, tfmReg );
      volumes.add( displayed1, lut2, 1.0 );
   }
}

class InsentisySwitchReg
{
   int state = 1;
   VolumeSwitchReg switch = NULL;
   InsentisySwitchReg( VolumeSwitchReg sw )
   {
      switch = sw;
   }

   void run()
   {
      //VolumeContainer& volumes = switch.volumes;
      if ( state == 0 )
      {
         switch.volumes.setIntensity( switch.displayed2, 1.0 );
         switch.volumes.setIntensity( switch.displayed1, 0.3 );
         switch.volumes.setLut( switch.displayed1, switch.lut2 );
         switch.volumes.setLut( switch.displayed2, switch.lut1 );
      } else {
         switch.volumes.setIntensity( switch.displayed1, 1.0 );
         switch.volumes.setIntensity( switch.displayed2, 0.3 );
         switch.volumes.setLut( switch.displayed1, switch.lut1 );
         switch.volumes.setLut( switch.displayed2, switch.lut2 );
      }
      state = 1 - state;
   }
}

class LutSwitchReg
{
   int state = 1;
   VolumeSwitchReg switch = NULL;
   LutSwitchReg( VolumeSwitchReg sw )
   {
      switch = sw;
   }

   void run()
   {
      //VolumeContainer& volumes = switch.volumes;
      if ( state == 0 )
      {
         switch.volumes.setLut( switch.displayed1, switch.lut2 );
         switch.volumes.setLut( switch.displayed2, switch.lut1 );
      } else {
         switch.volumes.setLut( switch.displayed1, switch.lut1 );
         switch.volumes.setLut( switch.displayed2, switch.lut2 );
      }
      state = 1 - state;
   }
}



Lut ctLut1( 0.0, 500.0 );
//Lut ctLut2( 35000.0, 45000.0, Vector3i( 255, 0, 0 ) );
Lut ctLut2( 0.0, 0.5, Vector3i( 0, 255, 0 ) ); 


DisplayRegionDetection detection( annotations );
AnnotationCreator annotationCreator( annotations, pointer );
RegistrationMr registrator( "c:/tmp/templates.bin" );

KeyboardCallback callbacks;


VolumeSwitchReg switch( ctLut1, ctLut2, volumes, registrator );
callbacks.addShortcut( switch.next, "F3" );

/*
InsentisySwitchReg switchIntensity( switch );
callbacks.addShortcut( switchIntensity.run, "F1" );

LutSwitchReg switchLut( switch );
callbacks.addShortcut( switchLut.run, "F2" );
*/
callbacks.addShortcut( switch.switchGroundTruth, "F2" );


ManipulatorPoint manipulator1( Vector3f(0.0, 0.0, 0.0) );
manipultors.add( pointer );

float factor = 1.5;
Segment segment1( volumes, Vector3f( factor, 0.0, 0.0 ), Vector3f( 0.0, -factor, 0.0 ) );
segment1.setTool( toolCentering );
segment1.setTool( manipultors );
segment1.setTool( annotations );
//segment1.setInterpolator( typename Segment::Nearest() );

Segment segment2( volumes, Vector3f( 0.0, factor, 0.0 ), Vector3f( 0.0, 0.0, factor ) );
segment2.setTool( toolCentering );
segment2.setTool( manipultors );
segment2.setTool( annotations );
//segment2.setInterpolator( typename Segment::Nearest() );

Segment segment3( volumes, Vector3f( factor, 0.0, 0.0 ), Vector3f( 0.0, 0.0, factor ) );
segment3.setTool( toolCentering );
segment3.setTool( manipultors );
segment3.setTool( annotations );
//segment3.setInterpolator( typename Segment::Nearest() );


Layout::Vertical vertical;
Layout::Horizontal horizontal;
Layout l1( segment1 );
Layout l2( segment2 );
Layout l3( segment3 );
Layout l6( Console() );

Layout layoutDisplay1( horizontal, Layout(horizontal, l1, l2, 0.51), l3, 0.66 );
Layout layout = Layout(vertical, l6, layoutDisplay1, 0.05);

ImageHolder holder;
Layout layout1 = layout;
Layout layout2 = Layout(vertical, Layout(Console()), Layout(holder), 0.5);



// start directly...
switch.next();