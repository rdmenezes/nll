import "mvvDicomTools"

class VolumeInfo
{
	Vector3f position = Vector3f( 0.0, 0.0, 0.0 );
	Vector3f spacing = Vector3f( 1.0, 1.0, 1.0 );
	string frameOfReference = "FoR_1.0";
	int nbSlices = 6;
	string seriesInstanceUid = "1.2.3.4";
	string sopClassUid = "1.2.840.10008.5.1.4.1.1.2";
	string sopInstanceUid = "1.3.12.2.1107.5.1.4.41102.4.0";
	string studyInstanceUid = "1.3.12.2.1107.5.1.4.41102.4.1";
	string modality = "CT";
	string seriesDate = "20050729";
	string seriesTime = "155221.000000";
   string acquisitionDate = seriesDate;
	string acquisitionTime = "155221.000000";
	
	VolumeInfo()
	{
		if ( modality == "CT" )
		{
			sopClassUid = "1.2.840.10008.5.1.4.1.1.2";
		} else {
		    sopClassUid = "1.2.840.10008.5.1.4.1.1.128";
		}
	}
}

int toInt( string v )
{
	return round( toFloat( v ) );
}
   
if ( argc >= 2 )
{
print( "RUN3" );
	VolumeInfo volumeInfo;
	print( "RUN4" );
	// configure options
	string path = argv[ 0 ];
	string exportPath = argv[ 1 ];
	
	println("DICOM input slice=" + path);
	println("Export directory=" + exportPath);
	
   print( "RUN2" );
   
	// read slices
	DicomSlice slice = readDicomSlice( path );
	assert( slice != NULL );
 
   // update the "constant" tags
   slice.mainAttributs.frameOfReference = volumeInfo.frameOfReference;
   slice.mainAttributs.seriesInstanceUid = volumeInfo.seriesInstanceUid;
   slice.mainAttributs.studyInstanceUid = volumeInfo.studyInstanceUid;
	slice.mainAttributs.sopClassUid = volumeInfo.sopClassUid;
   slice.mainAttributs.modality = volumeInfo.modality;
	slice.mainAttributs.seriesDate = volumeInfo.seriesDate;
	slice.mainAttributs.seriesTime = volumeInfo.seriesTime;
	slice.mainAttributs.acquisitionTime = volumeInfo.acquisitionTime;
	slice.mainAttributs.acquisitionDate = volumeInfo.acquisitionDate;
   
   // check with the parameter options
   if ( argc < 3 )
   {
      slice.mainAttributs.frameOfReference = slice.mainAttributs.frameOfReference + toString( rand() );
   } else {
      slice.mainAttributs.frameOfReference = argv[ 3 ];
   }
   if ( argc >= 4 )
   {
      slice.mainAttributs.seriesDate = argv[ 4 ];
   }
   if ( argc >= 5 )
   {
      volumeInfo.position[ 2 ] = toFloat( argv[ 5 ] );
   }
   if ( argc < 6 )
   {
      slice.mainAttributs.seriesInstanceUid = slice.mainAttributs.seriesInstanceUid + toString( rand() );
   } else {
      slice.mainAttributs.seriesInstanceUid = argv[ 6 ];
   }
   
   print( "RUN" );

	int sliceNb = 0;
	while ( sliceNb < volumeInfo.nbSlices )
	{
      // update the non constant tags and regenerate UIDs if necessary
      slice.mainAttributs.instanceNumber = sliceNb;
      slice.mainAttributs.sopInstanceUid = volumeInfo.sopInstanceUid + "." + toString( sliceNb );
      slice.mainAttributs.imagePositionPatient = volumeInfo.position + Vector3f( 0.0, 0.0, sliceNb * volumeInfo.spacing[ 2 ] );
	   slice.mainAttributs.seriesDescription = "MANIPULATED DATA: slice autogenerated mvv-1.0.4";
      
      string sliceName = slice.mainAttributs.seriesInstanceUid + "-" + toString( sliceNb ) + ".dcm";
      print( exportPath + sliceName );
      writeDicomSlice( slice, exportPath + sliceName );
      sliceNb = sliceNb + 1;
	}
} else {
	println("missing operand. usage: ./createDicomVolume.bat [seedDicomSlice] [outputDicomDir] [FoR] [seriesDate] [zposition] [SeriesUid]");
}