string volumeList[] =
{
   "D:/Devel/sandbox/regionDetectionTest/data/case300.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case301.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case302.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case303.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case304.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case305.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case306.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case307.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case308.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case309.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case310.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case311.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case312.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case313.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case314.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case315.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case316.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case317.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case318.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case400.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case401.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case402.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case403.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case404.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case405.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case406.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case407.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case408.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case409.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case410.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case411.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case412.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case413.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case414.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case500.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case501.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case502.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case503.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case504.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case505.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case506.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case507.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case48.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case49.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case50.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case51.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case52.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case53.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case54.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case55.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case56.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case57.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case58.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case59.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case60.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case61.mf2",
   "D:/Devel/sandbox/regionDetectionTest/data/case62.mf2"
};

/**
 @brief Pre-load volumes to speed up loading time
 */
class VolumeSwitch
{
   int index                        = 0;
   Lut lut                          = NULL;
   VolumeID displayed               = NULL;
   VolumeID preloaded               = NULL;
   DisplayRegionDetection detection = NULL;
   VolumeContainer volumes          = NULL;
   string[] list;

   VolumeSwitch( Lut l, VolumeContainer vs, string[] volumeList, DisplayRegionDetection rd )
   {
      lut = l;
      volumes = vs;
      list = volumeList;
      detection = rd;

      preloaded = readVolumeMF2Asynchronous( list[ index ] );
   }

   void next()
   {
      volumes.erase( displayed );
      displayed = preloaded;
      volumes.add( displayed, lut );
      detection.annotations.clear();
      Vector3f b = barycentre( displayed, lut );
      detection.compute( displayed );
      detection.annotations.add( b, "barycentre" );

      index = index + 1;
      preloaded = readVolumeMF2Asynchronous( list[ index ] );
      print("pre-load volume:" + list[ index ] );
   }
}

/**
 @brief Create an annotation where the pointer is located
 */
class AnnotationCreator
{
   ToolAnnotations      annotations;
   SegmentToolPointer   pointer;
   int                  id;

   AnnotationCreator( ToolAnnotations a, SegmentToolPointer p )
   {
      annotations = a;
      pointer = p;
      id = 1;
   }

   void run()
   {
      annotations.add( pointer.getPosition(), toString( id ) );
      id = id + 1;
   }
}

/**
 @brief find the maximum intensity voxel within a radius
 */
class FindPeakVoxel
{
   VolumeID volume = NULL;
   int range;
   SegmentToolPointer pointer = NULL;
   SegmentToolCamera camera = NULL;
   
   FindPeakVoxel( VolumeID v, int rangeInVoxel, SegmentToolPointer p, SegmentToolCamera c )
   {
      volume = v;
      range = rangeInVoxel;
      pointer = p;
      camera = c;
   }
   
   void run()
   {
      Volume v = getVolume( volume );
      Vector3f posInVoxel = v.positionToIndex( pointer.getPosition() );
      posInVoxel = Vector3f( toFloat( round( posInVoxel[ 0 ] ) ),
                             toFloat( round( posInVoxel[ 1 ] ) ),
                             toFloat( round( posInVoxel[ 2 ] ) ) );
      if ( posInVoxel[ 0 ] < 0.0 ||
           posInVoxel[ 1 ] < 0.0 ||
           posInVoxel[ 2 ] < 0.0 ||
           posInVoxel[ 0 ] >= v.getSize()[ 0 ] ||
           posInVoxel[ 1 ] >= v.getSize()[ 1 ] ||
           posInVoxel[ 2 ] >= v.getSize()[ 2 ] )
      {
        return;
      }
      
      float minx = max( 0.0, posInVoxel[ 0 ] - range );
      float miny = max( 0.0, posInVoxel[ 1 ] - range );
      float minz = max( 0.0, posInVoxel[ 2 ] - range );
      
      float maxx = min( posInVoxel[ 0 ] + range, toFloat( v.getSize()[ 0 ] ) );
      float maxy = min( posInVoxel[ 1 ] + range, toFloat( v.getSize()[ 1 ] ) );
      float maxz = min( posInVoxel[ 2 ] + range, toFloat( v.getSize()[ 2 ] ) );
      
      float max = -99999.0;
      Vector3f pos;
      
      float z = minz;
      while ( z <  maxz )
      {
        float y = miny;
        while ( y <  maxy )
        {
          float x = minx;
          while ( x <  maxx )
          {
            Vector3f posCur( x, y, z );
            float value = v.getValue( posCur );
            if ( value > max )
            {
              max = value;
              pos = posCur;
            }
            x = x + 1;
          }
          y = y + 1;
        }
        z = z + 1;
      }
      
      print(pos);
      camera.setPosition( v.indexToPosition( pos ) );
   }
}