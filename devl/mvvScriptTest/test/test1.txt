Test::Test2 a = typename Test::Test2(5) + typename Test();


class Test
{
   class Test2
   {
      int test;
      
      void Test2( int t )
      {
         test = t;
      }
      
      int getValue()
      {
         return test;
      }
      
      Test getTest()
      {
         return Test2( 2.5 );
      }
      
      class Test3
      {
         int haha;
         
         void Test3( int t )
         {
            haha = t;
         }
         
         int getValue()
         {
            return haha;
         }
         
         Test2 getTest()
         {
            return Test2( 3 );
         }
      }
   }
   
   float    val;
   float    vals[3];
   int      nn[] = {-1, 1, 10};

   void Test( float valDefault = 0.0 )
   {
      val = valDefault;
      
      if ( valDefault != -1.0 )
      {      
         vals[ 0 ] = val;
         vals[ 1 ] = val;
         vals[ 2 ] = val;
      } else {
         print( "error" );
      }
   }
   
   //Test2

   int operator()( int n )
   {
	return 2 * n;
   }

   
   int computeSum()
   {
      return  2 * 
      ( vals[ 0 ] + vals[ 1 ] ) + vals[ 2 ];
   }
}

test(5).res[4] = 3;

int nn[ 4 ];
int nn[] = {-1, 1, 10};
test2[ 8 ] = 5;
test3 = Test( 30 );
Test test = Test(2);
Test::Test2 test;
Test::Test2 test();
Test test8 = {1};
print( "test.test=");
print( "test=" + test.computeSum() );

{
   hg = 3.0 + test.nn[ 0 ];
}